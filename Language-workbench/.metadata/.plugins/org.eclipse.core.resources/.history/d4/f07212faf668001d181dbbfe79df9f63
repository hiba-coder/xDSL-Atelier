package abstractsyntax.aspects

import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import productionlinesystem.abstractsyntax.ProductionLineModel
import productionlinesystem.abstractsyntax.ProductionLineElement
import productionlinesystem.abstractsyntax.Container
import productionlinesystem.abstractsyntax.Machine
import productionlinesystem.abstractsyntax.Conveyor
import productionlinesystem.abstractsyntax.Tray
import productionlinesystem.abstractsyntax.Assembler
import productionlinesystem.abstractsyntax.Generator
import productionlinesystem.abstractsyntax.GenHandle
import productionlinesystem.abstractsyntax.GenHead

import static extension abstractsyntax.aspects.ProductionLineModelAspect.*
import static extension abstractsyntax.aspects.ProductionLineElementAspect.*
import static extension abstractsyntax.aspects.ContainerAspect.*
import static extension abstractsyntax.aspects.MachineAspect.*
import static extension abstractsyntax.aspects.ConveyorAspect.*
import static extension abstractsyntax.aspects.TrayAspect.*
import static extension abstractsyntax.aspects.AssemblerAspect.*
import static extension abstractsyntax.aspects.GeneratorAspect.*
import static extension abstractsyntax.aspects.GenHandleAspect.*
import static extension abstractsyntax.aspects.GenHeadAspect.*
import fr.inria.diverse.k3.al.annotationprocessor.Step
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod
import fr.inria.diverse.k3.al.annotationprocessor.ReplaceAspectMethod
import productionlinesystem.abstractsyntax.AbstractsyntaxFactory
import productionlinesystem.abstractsyntax.runtimestate.runtimestateFactory
import org.eclipse.emf.common.util.EList
import productionlinesystem.abstractsyntax.runtimestate.Parts
import productionlinesystem.abstractsyntax.runtimestate.ContainerState
import productionlinesystem.abstractsyntax.runtimestate.Handle
import productionlinesystem.abstractsyntax.runtimestate.Head

@Aspect(className=ProductionLineModel)
class ProductionLineModelAspect {

}

@Aspect(className=ProductionLineElement)
abstract class ProductionLineElementAspect {
	@Step
	def void work(){}

}

@Aspect(className=Container)
abstract class ContainerAspect extends ProductionLineElementAspect {
	@Step
	def void moveAlong(){}
	
	def EList<Parts> getCurrentparts(){
		
		(_self.system.simulationstate.elementsState.filter[eS|eS instanceof ContainerState].findFirst[cS|cS.productionlineelement == _self] as ContainerState).parts	
	}
	
}

@Aspect(className=Machine)
abstract class MachineAspect extends ProductionLineElementAspect {
	@Step
	def void start(){}
}

@Aspect(className=Conveyor)
class ConveyorAspect extends ContainerAspect {

}

@Aspect(className=Tray)
class TrayAspect extends ContainerAspect {

}

@Aspect(className=Assembler)
class AssemblerAspect extends MachineAspect {
	@Step
	@OverrideAspectMethod
	@ReplaceAspectMethod
	def void work(){
		if(!_self.in.getCurrentparts().isEmpty()){
		println("i am in the gen Assembler")
		var anHandle=_self.in.getCurrentparts().filter[e|e instanceof Handle].get(0)
		var aHead=_self.in.getCurrentparts().filter[e|e instanceof Head].get(0)
		
		_self.in.getCurrentparts().remove(anHandle)
		_self.in.getCurrentparts().remove(aHead)
		
		var aHammer = runtimestateFactory.eINSTANCE.createHammer
		_self.out.getCurrentparts().add(aHammer)
		return
		}
	}
}

@Aspect(className=Generator)
abstract class GeneratorAspect extends MachineAspect {

}

@Aspect(className=GenHandle)
class GenHandleAspect extends GeneratorAspect {
	
	@Step
	@OverrideAspectMethod
	@ReplaceAspectMethod
	def void work(){
		println("i am in the gen handle")
		var aHandle=runtimestateFactory.eINSTANCE.createHandle
		_self.out.getCurrentparts().add(aHandle)
		return 
	}

}

@Aspect(className=GenHead)
class GenHeadAspect extends GeneratorAspect {
	@Step
	@OverrideAspectMethod
	@ReplaceAspectMethod
	def void start(){
		println("i am in the gen Head")
		var aHead=runtimestateFactory.eINSTANCE.createHead
		_self.out.getCurrentparts().add(aHead)
		return 
	}
}



