/**
 */
package productionlinesystem.abstractsyntax.runtimestate.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import productionlinesystem.abstractsyntax.runtimestate.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see productionlinesystem.abstractsyntax.runtimestate.runtimestatePackage
 * @generated
 */
public class runtimestateAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static runtimestatePackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public runtimestateAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = runtimestatePackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject) object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected runtimestateSwitch<Adapter> modelSwitch = new runtimestateSwitch<Adapter>() {
		@Override
		public Adapter caseSimulationState(SimulationState object) {
			return createSimulationStateAdapter();
		}

		@Override
		public Adapter caseProductionLineElementState(ProductionLineElementState object) {
			return createProductionLineElementStateAdapter();
		}

		@Override
		public Adapter caseContainerState(ContainerState object) {
			return createContainerStateAdapter();
		}

		@Override
		public Adapter caseParts(Parts object) {
			return createPartsAdapter();
		}

		@Override
		public Adapter caseHead(Head object) {
			return createHeadAdapter();
		}

		@Override
		public Adapter caseHandle(Handle object) {
			return createHandleAdapter();
		}

		@Override
		public Adapter caseHammer(Hammer object) {
			return createHammerAdapter();
		}

		@Override
		public Adapter defaultCase(EObject object) {
			return createEObjectAdapter();
		}
	};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject) target);
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.SimulationState <em>Simulation State</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.SimulationState
	 * @generated
	 */
	public Adapter createSimulationStateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.ProductionLineElementState <em>Production Line Element State</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.ProductionLineElementState
	 * @generated
	 */
	public Adapter createProductionLineElementStateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.ContainerState <em>Container State</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.ContainerState
	 * @generated
	 */
	public Adapter createContainerStateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.Parts <em>Parts</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.Parts
	 * @generated
	 */
	public Adapter createPartsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.Head <em>Head</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.Head
	 * @generated
	 */
	public Adapter createHeadAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.Handle <em>Handle</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.Handle
	 * @generated
	 */
	public Adapter createHandleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link productionlinesystem.abstractsyntax.runtimestate.Hammer <em>Hammer</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see productionlinesystem.abstractsyntax.runtimestate.Hammer
	 * @generated
	 */
	public Adapter createHammerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //runtimestateAdapterFactory
